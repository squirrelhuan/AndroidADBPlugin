package main;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.chart.*;
import javafx.scene.control.Tooltip;
import javafx.scene.input.MouseEvent;
import org.junit.Test;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by squirrel桓 on 2017/11/29.
 */
public class LineChartHelper {

    //final static Tooltip tooltip = new Tooltip();

    public static void main(String[] args) {
        List list = initData();
        System.out.println("size = "+list.size());
    }

    public static List initData() {

        List series = new ArrayList<>();
        //添加参考值
        XYChart.Series series11 = new XYChart.Series();
        series11.setName("参考值");
        for (int i=0;i<5;i++){
            series11.getData().add(new XYChart.Data(months[i], 100-i*100/4));
        }
        series.add(series11);


        try {
            JavaDBHelper.open();
            JavaDBHelper.execute("drop table  jps_worker");
            JavaDBHelper.execute("drop table  jps_work_progress");
            //新建用户表
            JavaDBHelper.execute("create table jps_worker (id int not null generated by default as identity, name varchar(20), age int,register_time Date)");
            String date = "2017-01-10";
           /* Date date2 = new Date();*/
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式/* HH:mm:ss*/
            date = df.format(new Date());// new Date()为获取当前系统时间
            JavaDBHelper.execute("insert into jps_worker ( name,age,register_time) values ('小明',89,'" + date + "')");
            JavaDBHelper.execute("insert into jps_worker ( name,age,register_time) values ('小红',92,'" + date + "')");
            System.out.println("inser date success **************************");

            // JavaDBHelper.execute("insert into work_progress (name ,score) values ('小花',90)");
            ResultSet rSet = JavaDBHelper.executeQuery("select * from jps_worker ");
            System.out.println("------------------------");
            List<Worker> workers = new ArrayList<>();
            while (rSet.next()) {
                System.out.println(rSet.getString("id"));
                System.out.println(rSet.getString("name"));
                System.out.println(rSet.getInt("age"));
                System.out.println(rSet.getDate("register_time"));
                Worker worker = new Worker(rSet.getInt("id"),rSet.getString("name"));
                workers.add(worker);
            }

            //新建工作记录表
            int workId = 001;
            JavaDBHelper.execute("create table jps_work_progress (id int not null generated by default as identity,worker_id int, des varchar(20), progress_value int,progress_time Date)");
            String date_work_01 = "2017-01-10";
            String date_work_02 = "2017-01-11";
            String date_work_03 = "2017-01-12";
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'正常工作',100,'" + date_work_01 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'正常工作',89,'" + date_work_02 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'正常累了干的少了点',78,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'遇到问题了',72,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'问题解决了',52,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'加班干活',39,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'加班干活',17,'" + date_work_03 + "')");

            workId = 002;
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'项目开始',100,'" + date_work_01 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'工作顺利',86,'" + date_work_02 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'工作顺利',62,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'工作顺利',47,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'有额外工作',36,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'休息',36,'" + date_work_03 + "')");
            JavaDBHelper.execute("insert into jps_work_progress (worker_id, des,progress_value,progress_time) values (" + workId + ",'休息',36,'" + date_work_03 + "')");

            for (int i = 0; i < workers.size(); i++) {

                ResultSet rSet2 = JavaDBHelper.executeQuery("select * from jps_work_progress where worker_id= " + workers.get(i).getId());
                System.out.println("------------------------");
                XYChart.Series series1 = new XYChart.Series();
                series1.setName(workers.get(i).getName());
                int j = 0;
                while (rSet2.next()) {
                    System.out.println(rSet2.getString("id"));
                    System.out.println(rSet2.getString("des"));
                    System.out.println(rSet2.getInt("progress_value"));
                    System.out.println(rSet2.getDate("progress_time"));


                    series1.getData().add(new XYChart.Data(months[j], rSet2.getInt("progress_value")));
                    j++;
                }
                series.add(series1);
            }
            JavaDBHelper.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return series;
    }

    public static ObservableList<String> monthNames = FXCollections.observableArrayList();
    public static String[] months = {"周一","周二","周三","周四","周五","周六","周日"};
    @Test
    public static Chart test() {
        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        xAxis.setLabel("第一周");
        // Get an array with the English month names.
       // String[] months = DateFormatSymbols.getInstance(Locale.ENGLISH).getMonths();
        // Convert it to a list and add it to our ObservableList of months.

        monthNames.addAll(Arrays.asList(months));
        xAxis.setCategories(monthNames);
        LineChart<String, Number> lineChart =
                new LineChart<String, Number>(xAxis, yAxis);
        //BubbleChart bubbleChart = new BubbleChart(xAxis, yAxis);

        lineChart.setTitle("工作周报, 2017");


        List series = new ArrayList<>();

        Random random = new Random();
        for (int i = 0; i < 5; i++) {

            XYChart.Series series1 = new XYChart.Series();
            series1.setName("Portfolio 1");

            series1.getData().add(new XYChart.Data("Jan", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Feb", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Mar", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Apr", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("May", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Jun", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Jul", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Aug", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Sep", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Oct", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Nov", random.nextInt(100)));
            series1.getData().add(new XYChart.Data("Dec", random.nextInt(100)));
            /*series1.getNode().addEventHandler(MouseEvent.MOUSE_ENTERED, (MouseEvent e) -> {
                //if (e.getButton() == MouseButton.SECONDARY)
                //   cm.show(pic, e.getScreenX(), e.getScreenY());
                tooltip.setText("point");
            });*/
            series.add(series1);
        }

        // Scene scene  = new Scene(lineChart,800,600);
        lineChart.getData().addAll(initData());
        return lineChart;
    }


    public static class Worker{

        private int id;
        private String name;

        public Worker(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

}
